/**
 * Personal Information Hub
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['js/pih/client/ApiClient', 'js/pih/client/model/ApiError', 'js/pih/client/model/UserInfo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiError'), require('../model/UserInfo'));
  } else {
    // Browser globals (root is window)
    if (!root.PersonalInformationHub) {
      root.PersonalInformationHub = {};
    }
    root.PersonalInformationHub.UserApi = factory(root.PersonalInformationHub.ApiClient, root.PersonalInformationHub.ApiError, root.PersonalInformationHub.UserInfo);
  }
}(this, function(ApiClient, ApiError, UserInfo) {
  'use strict';

  /**
   * User service.
   * @module js/pih/client/api/UserApi
   * @version 0.0.1
   */

  /**
   * Constructs a new UserApi. 
   * @alias module:js/pih/client/api/UserApi
   * @class
   * @param {module:js/pih/client/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:js/pih/client/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addSetting operation.
     * @callback module:js/pih/client/api/UserApi~addSettingCallback
     * @param {String} error Error message, if any.
     * @param {'Integer'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new setting
     * 
     * @param {String} name Setting Name
     * @param {String} value Setting Value
     * @param {Boolean} overwirte Overwrite existing
     * @param {String} t Authorization Token
     * @param {module:js/pih/client/api/UserApi~addSettingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Integer'}
     */
    this.addSetting = function(name, value, overwirte, t, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling addSetting";
      }

      // verify the required parameter 'value' is set
      if (value == undefined || value == null) {
        throw "Missing the required parameter 'value' when calling addSetting";
      }

      // verify the required parameter 'overwirte' is set
      if (overwirte == undefined || overwirte == null) {
        throw "Missing the required parameter 'overwirte' when calling addSetting";
      }

      // verify the required parameter 't' is set
      if (t == undefined || t == null) {
        throw "Missing the required parameter 't' when calling addSetting";
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'value': value,
        'overwirte': overwirte
      };
      var headerParams = {
        't': t
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'Integer';

      return this.apiClient.callApi(
        '/user/setting', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the callDelete operation.
     * @callback module:js/pih/client/api/UserApi~callDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Tag or Category
     * 
     * @param {String} t Authorization Token
     * @param {Array.<String>} r Resources
     * @param {module:js/pih/client/api/UserApi~callDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.callDelete = function(t, r, callback) {
      var postBody = null;

      // verify the required parameter 't' is set
      if (t == undefined || t == null) {
        throw "Missing the required parameter 't' when calling callDelete";
      }

      // verify the required parameter 'r' is set
      if (r == undefined || r == null) {
        throw "Missing the required parameter 'r' when calling callDelete";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        't': t,
        'r': r
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/field', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the create operation.
     * @callback module:js/pih/client/api/UserApi~createCallback
     * @param {String} error Error message, if any.
     * @param {'Integer'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Tag or Category
     * 
     * @param {String} name DocField Name
     * @param {String} type DocField Name
     * @param {String} t Authorization Token
     * @param {module:js/pih/client/api/UserApi~createCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Integer'}
     */
    this.create = function(name, type, t, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling create";
      }

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw "Missing the required parameter 'type' when calling create";
      }

      // verify the required parameter 't' is set
      if (t == undefined || t == null) {
        throw "Missing the required parameter 't' when calling create";
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'type': type
      };
      var headerParams = {
        't': t
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'Integer';

      return this.apiClient.callApi(
        '/user/field', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSetting operation.
     * @callback module:js/pih/client/api/UserApi~deleteSettingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete setting
     * 
     * @param {String} t Authorization Token
     * @param {Array.<String>} r Resources
     * @param {module:js/pih/client/api/UserApi~deleteSettingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSetting = function(t, r, callback) {
      var postBody = null;

      // verify the required parameter 't' is set
      if (t == undefined || t == null) {
        throw "Missing the required parameter 't' when calling deleteSetting";
      }

      // verify the required parameter 'r' is set
      if (r == undefined || r == null) {
        throw "Missing the required parameter 'r' when calling deleteSetting";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        't': t,
        'r': r
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/setting', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllFields operation.
     * @callback module:js/pih/client/api/UserApi~getAllFieldsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all user Tags or Categories
     * 
     * @param {String} type DocField Type
     * @param {String} t Authorization Token
     * @param {module:js/pih/client/api/UserApi~getAllFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    this.getAllFields = function(type, t, callback) {
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw "Missing the required parameter 'type' when calling getAllFields";
      }

      // verify the required parameter 't' is set
      if (t == undefined || t == null) {
        throw "Missing the required parameter 't' when calling getAllFields";
      }


      var pathParams = {
      };
      var queryParams = {
        'type': type
      };
      var headerParams = {
        't': t
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Object];

      return this.apiClient.callApi(
        '/user/field', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInfo operation.
     * @callback module:js/pih/client/api/UserApi~getInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:js/pih/client/model/UserInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about the user
     * 
     * @param {String} t Authorization Token
     * @param {module:js/pih/client/api/UserApi~getInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:js/pih/client/model/UserInfo}
     */
    this.getInfo = function(t, callback) {
      var postBody = null;

      // verify the required parameter 't' is set
      if (t == undefined || t == null) {
        throw "Missing the required parameter 't' when calling getInfo";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        't': t
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UserInfo;

      return this.apiClient.callApi(
        '/user/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the update operation.
     * @callback module:js/pih/client/api/UserApi~updateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Tag or Category&#39;s name
     * 
     * @param {String} name DocField Name
     * @param {String} t Authorization Token
     * @param {String} r Resources
     * @param {module:js/pih/client/api/UserApi~updateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.update = function(name, t, r, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling update";
      }

      // verify the required parameter 't' is set
      if (t == undefined || t == null) {
        throw "Missing the required parameter 't' when calling update";
      }

      // verify the required parameter 'r' is set
      if (r == undefined || r == null) {
        throw "Missing the required parameter 'r' when calling update";
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name
      };
      var headerParams = {
        't': t,
        'r': r
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/field', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSetting operation.
     * @callback module:js/pih/client/api/UserApi~updateSettingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a setting
     * 
     * @param {String} value Setting value
     * @param {String} t Authorization Token
     * @param {String} r Resources
     * @param {module:js/pih/client/api/UserApi~updateSettingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateSetting = function(value, t, r, callback) {
      var postBody = null;

      // verify the required parameter 'value' is set
      if (value == undefined || value == null) {
        throw "Missing the required parameter 'value' when calling updateSetting";
      }

      // verify the required parameter 't' is set
      if (t == undefined || t == null) {
        throw "Missing the required parameter 't' when calling updateSetting";
      }

      // verify the required parameter 'r' is set
      if (r == undefined || r == null) {
        throw "Missing the required parameter 'r' when calling updateSetting";
      }


      var pathParams = {
      };
      var queryParams = {
        'value': value
      };
      var headerParams = {
        't': t,
        'r': r
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/setting', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
